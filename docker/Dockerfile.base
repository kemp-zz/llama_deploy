# --------------------------------------------------------------
# 参数（可在 CI / 本地 build 时覆盖）
# --------------------------------------------------------------
ARG BUILD_IMAGE=python:3.11-slim
ARG DIST_IMAGE=python:3.11-slim
ARG UV_IMAGE=ghcr.io/astral-sh/uv:latest   # uv 二进制镜像

ARG LLAMA_DEPLOY_VERSION=main
ARG LLAMA_DEPLOY_VERSION_SHA=HEAD
ARG LLAMA_DEPLOY_EXTRAS="[torch,cuda]"    # 必须加方括号
ARG GIT_CLONE_OPTIONS="--depth 1"

ARG APISERVER_PORT=8000
ARG PROMETHEUS_PORT=9090
ARG PROMETHEUS_ENABLED="false"

# --------------------------------------------------------------
# 1️⃣ uv 镜像（只提供 uv 二进制）
# --------------------------------------------------------------
FROM ${UV_IMAGE} AS uv_image

# --------------------------------------------------------------
# 2️⃣ 编译/构建阶段
# --------------------------------------------------------------
FROM ${BUILD_IMAGE} AS build-image

# 把 uv 二进制拷贝进来（后面会再次拷贝到运行镜像）
COPY --from=uv_image /usr/local/bin/uv /usr/local/bin/uv

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        git \
        curl && \
    rm -rf /var/lib/apt/lists/*

# ---- 拉取源码 -------------------------------------------------
ARG LLAMA_DEPLOY_VERSION \
    LLAMA_DEPLOY_VERSION_SHA \
    GIT_CLONE_OPTIONS
RUN git clone ${GIT_CLONE_OPTIONS} \
        --branch=${LLAMA_DEPLOY_VERSION} \
        https://github.com/kemp-zz/llama_deploy.git \
        /opt/llama_deploy && \
    cd /opt/llama_deploy && \
    git checkout ${LLAMA_DEPLOY_VERSION_SHA}

WORKDIR /opt/llama_deploy

# ---- 创建 virtualenv -------------------------------------------
RUN python3 -m venv --system-site-packages /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# ---- 安装项目依赖 -----------------------------------------
ARG LLAMA_DEPLOY_EXTRAS
RUN pip install --upgrade pip && \
    pip install --no-cache-dir ".${LLAMA_DEPLOY_EXTRAS}"

# --------------------------------------------------------------
# 3️⃣ 运行时镜像（仅保留 venv + 运行时工具）
# --------------------------------------------------------------
FROM ${DIST_IMAGE} AS final

# 再把 uv 拷贝一次，方便容器里直接使用 `uv`（可选）
COPY --from=uv_image /usr/local/bin/uv /usr/local/bin/uv

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        git \
        nodejs npm \
        curl jq net-tools iputils-ping telnet vim wget && \
    npm i pnpm --global && \
    rm -rf /var/lib/apt/lists/*

# --------------------------------------------------------------
# 4️⃣ 端口 & 参数（由 compose / run‑* 脚本注入）
# --------------------------------------------------------------
ARG APISERVER_PORT PROMETHEUS_PORT PROMETHEUS_ENABLED
EXPOSE ${APISERVER_PORT}
EXPOSE ${PROMETHEUS_PORT}

# --------------------------------------------------------------
# 5️⃣ 把构建好的 venv、启动脚本拷贝进来
# --------------------------------------------------------------
COPY --from=build-image /opt/venv /opt/venv
COPY ./run_apiserver.py /opt/
COPY ./run_autodeploy.py /opt/

# --------------------------------------------------------------
# 6️⃣ 环境变量（默认值，可在 `docker run -e` 覆盖）
# --------------------------------------------------------------
ENV PATH="/opt/venv/bin:$PATH"
ENV LLAMA_DEPLOY_APISERVER_RC_PATH=/opt/rc.yaml
ENV LLAMA_DEPLOY_APISERVER_HOST=0.0.0.0
ENV LLAMA_DEPLOY_APISERVER_PORT=${APISERVER_PORT}
ENV LLAMA_DEPLOY_APISERVER_PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED}
ENV LLAMA_DEPLOY_APISERVER_PROMETHEUS_PORT=${PROMETHEUS_PORT}

# --------------------------------------------------------------
# 7️⃣ 多入口（只跑 API 或 UI+API）
# --------------------------------------------------------------
FROM final AS base
ENTRYPOINT ["python", "/opt/run_apiserver.py"]

FROM final AS autodeploy
ENTRYPOINT ["python", "/opt/run_autodeploy.py"]
